srcs/builtins.c:22:    while (args[i] && !strcmp(args[i], "-n"))
srcs/builtins.c:73:    env = data->first;
srcs/builtins.c:74:    if (chdir(path) == -1)
srcs/builtins.c:81:    env->value = tmp->value;
srcs/builtins.c:82:    tmp->value = new_pwd(tmp->value, path);
srcs/builtins.c:96:    	data->last->next = create_env_elem(args[i]);
srcs/builtins.c:97:        data->last->next->prev = data->last;
srcs/builtins.c:98:    	data->last = data->last->next;
srcs/builtins.c:116:	    free(env->key);
srcs/builtins.c:117:	    free(env->value);
srcs/builtins.c:118:	    if (env->prev)
srcs/builtins.c:119:		(env->prev)->next = env->next;
srcs/builtins.c:120:	    if (env->next)
srcs/builtins.c:121:		(env->next)->prev = env->prev;
srcs/builtins.c:122:	    env->set = 1;
srcs/builtins.c:134:    env = data->first;
srcs/builtins.c:139:		ft_putstr(env->key);
srcs/builtins.c:141:		ft_putstr(env->value);
srcs/builtins.c:143:		env = env->next;
srcs/dollar.c:42:		str[*i - 1] = '\n';
srcs/dollar.c:46:	while (j--)
srcs/dollar.c:47:		(*key)[j] = str[--(*i)];
srcs/dollar.c:49:	*i += ft_strlen(*key) - 1;
srcs/dollar.c:71:						*i - ft_strlen(key), *i - ft_strlen(key) + keylen + 1))
srcs/dollar.c:102:		if (sstr[i] == '\n' && !dealloc((void **)str, i, i + 1) && (i-- + 2))
srcs/dollar.c:117:		if (!dollar_ptlc(env, &(cmd_lst->command), 0))
srcs/dollar.c:120:		while (cmd_lst->args[i])
srcs/dollar.c:122:			if (!dollar_ptlc(env, &(cmd_lst->args[i]), 0))
srcs/dollar.c:126:		cmd_lst = cmd_lst->next;
srcs/environment.c:29:	env = data->first;
srcs/environment.c:30:	while (env != NULL && ft_strcmp(str, env->key))
srcs/environment.c:31:		env = env->next;
srcs/environment.c:32:	if (env != NULL && !ft_strcmp(str, env->key))
srcs/environment.c:33:		dprintf(1, "%s\n", env->value);
srcs/environment.c:42:	env = data->first;
srcs/environment.c:45:		if (key[i] != env->key[i])
srcs/environment.c:47:			env = env->next;
srcs/environment.c:48:			i = -1;
srcs/environment.c:52:	if (env && ft_strlen(key) != ft_strlen(env->key))
srcs/environment.c:55:		return (ft_strdup(env->value, 0));
srcs/environment.c:66:	env = data->first;
srcs/environment.c:69:		if (key[i] != env->key[i])
srcs/environment.c:71:			env = env->next;
srcs/environment.c:72:			i = -1;
srcs/environment.c:76:	if (env && (ft_strlen(key) != ft_strlen(env->key) || env->set == 0))
srcs/error.c:19:	if (cmd_lst->args[0] && !ft_strchr(cmd_lst->args[0], '/'))
srcs/error.c:20:	    dprintf(2, "Minishell-4.2: command not found: %s\n", cmd_lst->args[0]);
srcs/error.c:21:	else if (cmd_lst->args[0])
srcs/error.c:22:	    dprintf(2, "Minishell-4.2: %s: No such file or directory\n", cmd_lst->args[0]);
srcs/error.c:23:	else if (cmd_lst->redir_out_path && !cmd_lst->redir_out_fd)
srcs/error.c:24:	    dprintf(2, "%s: could not open file\n", cmd_lst->redir_out_path);
srcs/error.c:25:	else if (cmd_lst->redir_in_path && !cmd_lst->redir_in_fd)
srcs/error.c:26:	    dprintf(2, "%s: could not open file\n", cmd_lst->redir_in_path);
srcs/error.c:47:	    dprintf(2, "Minishell-4.2: exit: %s: numeric argument required\n", \
srcs/error.c:53:	    dprintf(2, "Minishell-4.2: exit: too many arguments\n");
srcs/exec.c:17:	if (!cmd->prev)
srcs/exec.c:19:		if (cmd->next && dup2(cmd->fd[1], STDOUT_FILENO) == -1)
srcs/exec.c:22:	else if (cmd->next)
srcs/exec.c:24:		if (dup2(cmd->prev->fd[0], STDIN_FILENO) == -1 || \
srcs/exec.c:25:				dup2(cmd->fd[1], STDOUT_FILENO) == -1)
srcs/exec.c:27:		close(cmd->prev->fd[0]);
srcs/exec.c:31:		if (dup2(cmd->prev->fd[0], STDIN_FILENO) == -1)
srcs/exec.c:33:		close(cmd->prev->fd[0]);
srcs/exec.c:35:	if (cmd->next)
srcs/exec.c:36:		close(cmd->fd[0]);
srcs/exec.c:37:	if (cmd->next)
srcs/exec.c:38:		close(cmd->fd[1]);
srcs/exec.c:44:	if (cmd->redir_in_fd)
srcs/exec.c:45:		fd = cmd->redir_in_fd;
srcs/exec.c:46:	if (!ft_strcmp(cmd->command, "cd"))
srcs/exec.c:47:		ret = cd(cmd, envv, cmd->args[1]);
srcs/exec.c:48:	else if (!ft_strcmp(cmd->command, "echo"))
srcs/exec.c:49:		ret = echo(fd, cmd->args);
srcs/exec.c:50:	else if (!ft_strcmp(cmd->command, "env"))
srcs/exec.c:52:	else if (!ft_strcmp(cmd->command, "unset"))
srcs/exec.c:53:		ret = unset(envv, cmd->args);
srcs/exec.c:54:	else if (!ft_strcmp(cmd->command, "pwd"))
srcs/exec.c:56:	else if (!ft_strcmp(cmd->command, "export"))
srcs/exec.c:57:		ret = expor(envv, cmd->args); // args multplies
srcs/exec.c:58:	else if (!strcmp(cmd->command, "exit"))
srcs/exec.c:60:	    exiit(cmd, envv->first, cmd->args, 0);
srcs/exec.c:67:	    return (-1);
srcs/exec.c:88:	tmp = ft_strdup(cmd_lst->command, 0);
srcs/exec.c:99:		if (execve(tmp, cmd_lst->args, envp) == -1)
srcs/exec.c:118:	if (cmd->redir_in_fd && dup2(cmd->redir_in_fd, STDIN_FILENO) == -1 && \
srcs/exec.c:119:			close(cmd->redir_in_fd))
srcs/exec.c:121:	if (cmd->redir_out_fd && dup2(cmd->redir_out_fd, STDOUT_FILENO) == -1 && \
srcs/exec.c:122:			close(cmd->redir_out_fd))
srcs/exec.c:125:	if (ret == -1 || (ret == 0 && !exec_cmd_part_two(cmd, path, envp, 0)))
srcs/exec.c:137:	if (cmd->next && pipe(cmd->fd) == -1)
srcs/exec.c:145:	else if (pid == -1)
srcs/exec.c:147:	else if (pid && !cmd->next)
srcs/exec.c:150:	if (cmd->next)
srcs/exec.c:151:		close(cmd->fd[1]);
srcs/exec.c:152:	if (cmd->prev)
srcs/exec.c:153:		close(cmd->prev->fd[0]);
srcs/ft_split.c:59:		i--;
srcs/initlst.c:51:	if (!nmalloc((void **)&dest, i - u + 1))
srcs/initlst.c:80:	current = lst->first;
srcs/initlst.c:84:		new->prev = current;
srcs/initlst.c:85:		current->next = new;
srcs/initlst.c:86:		lst->last = current;
srcs/initlst.c:87:		current = current->next;
srcs/initlst.c:90:	lst->size = i;
srcs/initlst.c:91:	//current->next = NULL;
srcs/lst_utils.c:22:	new->key = key(path);
srcs/lst_utils.c:23:	new->value = value(path);
srcs/lst_utils.c:24:	new->set = 1;
srcs/lst_utils.c:25:	new->next = NULL;
srcs/lst_utils.c:26:	new->prev = NULL;
srcs/lst_utils.c:36:	chunk->command = 0;
srcs/lst_utils.c:37:	chunk->args = 0;
srcs/lst_utils.c:38:	chunk->redir_in_type = 0;
srcs/lst_utils.c:39:	chunk->redir_in_path = 0;
srcs/lst_utils.c:40:	chunk->redir_out_type = 0;
srcs/lst_utils.c:41:	chunk->redir_out_path = 0;
srcs/lst_utils.c:42:	chunk->redir_in_fd = 0;
srcs/lst_utils.c:43:	chunk->redir_out_fd = 0;
srcs/lst_utils.c:44:	chunk->fd[0] = 0;
srcs/lst_utils.c:45:	chunk->fd[1] = 0;
srcs/lst_utils.c:46:	chunk->next = 0;
srcs/lst_utils.c:47:	chunk->prev = 0;
srcs/lst_utils.c:57:		tmp = env->next;
srcs/lst_utils.c:58:		if (env->key)
srcs/lst_utils.c:59:			free(env->key);
srcs/lst_utils.c:60:		if (env->value)
srcs/lst_utils.c:61:			free(env->value);
srcs/lst_utils.c:75:		while (cmd->args && cmd->args[i])
srcs/lst_utils.c:76:			free(cmd->args[i++]);
srcs/lst_utils.c:77:		free(cmd->args);
srcs/lst_utils.c:78:		free(cmd->command);
srcs/lst_utils.c:79:		free(cmd->redir_in_path);
srcs/lst_utils.c:80:		free(cmd->redir_out_path);
srcs/lst_utils.c:81:		if (cmd->redir_out_fd)
srcs/lst_utils.c:82:			close(cmd->redir_out_fd);
srcs/lst_utils.c:83:		if (cmd->redir_in_fd)
srcs/lst_utils.c:84:			close(cmd->redir_in_fd);
srcs/lst_utils.c:85:		if (cmd->fd[0])
srcs/lst_utils.c:86:			close(cmd->fd[0]);
srcs/lst_utils.c:87:		if (cmd->fd[1])
srcs/lst_utils.c:88:			close(cmd->fd[1]);
srcs/lst_utils.c:89:		tmp = cmd->next;
srcs/main.c:24:    if (!(nmalloc_2d(&envp, env->size + 1)))
srcs/main.c:27:    environment = env->first;
srcs/main.c:30:	len = ft_strlen(environment->key) + ft_strlen(environment->value) + 1;
srcs/main.c:33:	len = ft_strlen(environment->key);
srcs/main.c:34:	ft_strncpy(envp[i], environment->key, len);
srcs/main.c:36:	ft_strncpy(envp[i] + len + 1, environment->value, \
srcs/main.c:37:		ft_strlen(environment->value));
srcs/main.c:38:	environment = environment->next;
srcs/main.c:54:	error(cmds, data_env->first, errno, 1);
srcs/main.c:55:    i = -1;
srcs/main.c:58:    if (!cmds->prev && !cmds->next)
srcs/main.c:60:    if (cmds->prev || cmds->next || i == 0)
srcs/main.c:62:	    cmds = cmds->next;
srcs/main.c:63:    if (i == -1)
srcs/main.c:64:	error(cmds, data_env->first, errno, 1);
srcs/main.c:76:    prt = readline("Minishell-4.2$> ");
srcs/main.c:85:		free_cmd_lst(cmd_ctrl->first);
srcs/main.c:86:		prt = readline("Minishell-4.2$> ");
srcs/main.c:89:	    prompt_part_two(cmd_ctrl->first, data_env, &thefinalpid);
srcs/main.c:90:	    if (thefinalpid != -1)
srcs/main.c:92:	    free_cmd_lst(cmd_ctrl->first);
srcs/main.c:96:    prt = readline("Minishell-4.2$> ");
srcs/norm_alloc.c:20:	while (size--)
srcs/norm_alloc.c:40:	free(*(char **)ptr - slen);
srcs/norm_alloc.c:41:	*ptr = tmptr - slen;
srcs/norm_alloc.c:56:				slen + chunklen - (endi - starti) + 2))
srcs/norm_alloc.c:58:	i = -1;
srcs/norm_alloc.c:59:	if (*(char **)ptr && endi - starti > 1)
srcs/norm_alloc.c:72:	free(mem_to_add - chunklen);
srcs/norm_alloc.c:84:	if (!nmalloc((void **)&tmptr, slen - (endi - starti) + 1))
srcs/parse_redirections.c:35:	if (cmd->redir_in_fd)
srcs/parse_redirections.c:36:		close(cmd->redir_in_fd);
srcs/parse_redirections.c:38:	cmd->redir_in_fd = open(".heredoc", O_RDWR | O_CREAT | O_APPEND, 0666);
srcs/parse_redirections.c:39:	if (cmd->redir_in_fd == -1)
srcs/parse_redirections.c:46:		if (!ft_strcmp(line, cmd->redir_in_path))
srcs/parse_redirections.c:48:			free(cmd->redir_in_path);
srcs/parse_redirections.c:49:			cmd->redir_in_path = ft_strdup(".heredoc", 0);
srcs/parse_redirections.c:50:			return ((cmd->redir_in_path != 0));
srcs/parse_redirections.c:52:		write(cmd->redir_in_fd, line, ft_strlen(line));
srcs/parse_redirections.c:53:		write(cmd->redir_in_fd, "\n", 1);
srcs/parse_redirections.c:54:		close(cmd->redir_in_fd);
srcs/parse_redirections.c:55:		cmd->redir_in_fd = open(".heredoc", O_RDWR | O_CREAT | O_APPEND, 0666);
srcs/parse_redirections.c:69:		free(cmd_lst->redir_in_path);
srcs/parse_redirections.c:70:		if (!nmalloc((void **)&(cmd_lst->redir_in_path), pathlen + 1))
srcs/parse_redirections.c:72:		ft_strncpy(cmd_lst->redir_in_path, line + *i, pathlen);	    
srcs/parse_redirections.c:74:		return (cmd_lst->redir_in_path);
srcs/parse_redirections.c:78:		free(cmd_lst->redir_out_path);
srcs/parse_redirections.c:79:		if (!nmalloc((void **)&(cmd_lst->redir_out_path), pathlen + 1))
srcs/parse_redirections.c:81:		ft_strncpy(cmd_lst->redir_out_path, line + *i, pathlen);
srcs/parse_redirections.c:83:		return (cmd_lst->redir_out_path);
srcs/parse_redirections.c:89:	if (cmd->command[*i] == '"')
srcs/parse_redirections.c:92:		while (cmd->command[*i] != '"')
srcs/parse_redirections.c:96:	if (cmd->command[*i] == '\'')
srcs/parse_redirections.c:99:		while (cmd->command[*i] != '\'')
srcs/parse_redirections.c:109:		if (!dollar_ptlc(env, &cmd->redir_in_path, 0))
srcs/parse_redirections.c:111:		if (cmd->redir_in_fd)
srcs/parse_redirections.c:112:			close(cmd->redir_in_fd);
srcs/parse_redirections.c:113:		cmd->redir_in_fd = open(cmd->redir_in_path, O_RDONLY);
srcs/parse_redirections.c:117:		if (!dollar_ptlc(env, &cmd->redir_out_path, 0))
srcs/parse_redirections.c:119:		if (cmd->redir_out_fd)
srcs/parse_redirections.c:120:			close(cmd->redir_out_fd);
srcs/parse_redirections.c:121:		if (cmd->redir_out_type == 1)
srcs/parse_redirections.c:122:			cmd->redir_out_fd = open(cmd->redir_out_path, O_RDWR | O_CREAT | \
srcs/parse_redirections.c:125:			cmd->redir_out_fd = open(cmd->redir_out_path, O_WRONLY | O_CREAT | \
srcs/parse_redirections.c:128:	if ((type == 1 && cmd->redir_in_fd == -1) || \
srcs/parse_redirections.c:129:			(type == 2 && cmd->redir_out_fd == -1))
srcs/parse_redirections.c:139:	while ((cmd->command)[++i])
srcs/parse_redirections.c:142:		if ((cmd->command)[i] == '<' && ++i)
srcs/parse_redirections.c:144:			si = i - 1;
srcs/parse_redirections.c:145:			cmd->redir_in_type = 1 + (cmd->command[i] == '<');
srcs/parse_redirections.c:147:			cmd->redir_in_path = get_redir_path(cmd, cmd->command, &i, 1);
srcs/parse_redirections.c:149:			if (!cmd->redir_in_path || !dealloc((void **)&cmd->command, si, ei))
srcs/parse_redirections.c:151:			if (cmd->redir_in_type == 2 && !heredoc(cmd, 0))
srcs/parse_redirections.c:153:			else if (cmd->redir_in_type == 1 && \
srcs/parse_redirections.c:156:			i = si - 1;
srcs/parse_redirections.c:167:	while ((cmd->command)[++i])
srcs/parse_redirections.c:170:		if ((cmd->command)[i] == '>' && ++i)
srcs/parse_redirections.c:172:			si = i - 1;
srcs/parse_redirections.c:173:			cmd->redir_out_type = 1 + (cmd->command[i] == '>');
srcs/parse_redirections.c:175:			cmd->redir_out_path = get_redir_path(cmd, cmd->command, &i, 2);
srcs/parse_redirections.c:177:			if (!cmd->redir_out_path || !dealloc((void **)&cmd->command, si, ei) || \
srcs/parse_redirections.c:180:			i = si - 1;
srcs/parse_redirections.c:190:		if (!parse_guillemets_in(cmd_lst, env, -1) || \
srcs/parse_redirections.c:191:				!parse_guillemets_out(cmd_lst, env, -1))
srcs/parse_redirections.c:193:		dprintf(1, "FD |%d|", cmd_lst->redir_in_fd);
srcs/parse_redirections.c:194:		cmd_lst = cmd_lst->next;
srcs/parsing.c:73:			if (/*(i && s[i - 1] != '>' && \
srcs/parsing.c:74:s[i - 1] != '<' && s[i - 1] != '|') || */!sss(s, &i) || \
srcs/parsing.c:75:(s[i] == '>' && i && s[i - 1] == ' ') || s[i] == '<' || s[i] == '|' || \
srcs/parsing.c:79:			if (!sss(s, &i) || (s[i] == '<' && i && s[i - 1] == ' ') || \
srcs/parsing.c:96:	cmd_ctrl->size = 1;
srcs/parsing.c:97:	cmd_ctrl->first = cmd_lst;
srcs/parsing.c:99:		return ((error(cmd_lst, env->first, errno, 1)));
srcs/parsing.c:101:		return (error(cmd_lst, env->first, SYNTAX_ERROR, 0));
srcs/parsing.c:104:			!split_args(cmd_ctrl->first, 0, 0))
srcs/parsing.c:105:		return (error(cmd_lst, env->first, errno, 1));
srcs/parsing.c:106:	if (!expand_dollars(env, cmd_ctrl->first))
srcs/parsing.c:107:		return (error(cmd_lst, env->first, errno, 1));
srcs/parsing.c:110:		cmd_lst->args[0] = cmd_lst->command;
srcs/parsing.c:111:		cmd_lst = cmd_lst->next;
srcs/parsing.c:115:	cmd_lst = cmd_ctrl->first;
srcs/parsing.c:119:		dprintf(1, "cmd : |%s|\n", cmd_lst->command);
srcs/parsing.c:120:		dprintf(1, "redir out :|%s|\n",cmd_lst->redir_out_path);
srcs/parsing.c:121:		dprintf(1, "redir in :|%s|\n",cmd_lst->redir_in_path);
srcs/parsing.c:122:		while(cmd_lst->args[i]) 
srcs/parsing.c:124:			dprintf(1, "args :|%s|\n", cmd_lst->args[i++]);
srcs/parsing.c:126:		cmd_lst = cmd_lst->next;
srcs/split_args.c:42:	while (cmd_lst->command[*i] && cmd_lst->command[*i] == ' ')
srcs/split_args.c:44:	if (!cmd_lst->command[*i])
srcs/split_args.c:46:	len = iter_through_word(cmd_lst->command + *i);
srcs/split_args.c:47:	if (!nmalloc((void **)&(cmd_lst->args[*y]), sizeof(char) * (len + 1)))
srcs/split_args.c:52:		cmd_lst->args[*y][x++] = cmd_lst->command[j++];
srcs/split_args.c:53:	cmd_lst->args[*y][x] = 0;
srcs/split_args.c:54:	if (!dealloc((void **)&(cmd_lst->command), j - len, *i + len))
srcs/split_args.c:56:	*i = j - len;
srcs/split_args.c:57:	trim_spaces(&(cmd_lst->args[*y]));
srcs/split_args.c:86:		if (!nmalloc_2d((char ***)&(cmd_lst->args), \
srcs/split_args.c:87:					(argscount(cmd_lst->command) + 2)))
srcs/split_args.c:89:		if (!argscount(cmd_lst->command))
srcs/split_args.c:91:			if (!trim_spaces(&(cmd_lst->command)))
srcs/split_args.c:93:			cmd_lst = cmd_lst->next;
srcs/split_args.c:97:		i += iter_through_word(cmd_lst->command);
srcs/split_args.c:99:		while (cmd_lst->command[i])
srcs/split_args.c:102:		if (!trim_spaces(&(cmd_lst->command)))
srcs/split_args.c:104:		cmd_lst = cmd_lst->next;
srcs/split_pipes.c:39:	if (!nmalloc((void **)&cmd_lst->command, len + 1))
srcs/split_pipes.c:42:	while (len--)
srcs/split_pipes.c:43:		cmd_lst->command[len] = line[len];
srcs/split_pipes.c:58:		cmd_ctrl->size++;
srcs/split_pipes.c:61:			cmd_lst->next = create_new_chunk();
srcs/split_pipes.c:62:			cmd_lst->next->prev = cmd_lst;
srcs/split_pipes.c:63:			cmd_lst = cmd_lst->next;
srcs/str_utils.c:24:	return (str - sstr);
srcs/str_utils.c:38:	return (str1[i] - str2[i]);
srcs/str_utils.c:54:	while (--i >= 0 && str[i] && str[i] == ' ')
srcs/str_utils.c:69:	if (!(nmalloc((void **)&nstr, k - \
srcs/str_utils.c:76:	while ((*str)[--k] == ' ')
srcs/str_utils.c:93:	i = -1;
srcs/str_utils2.c:22:		while (*src && len--)
srcs/str_utils2.c:60:		free(s1 - len);
srcs/str_utils3.c:11:    if (str[i] == '-' && i++)
srcs/str_utils3.c:12:	sign = -1;
srcs/str_utils3.c:19:	n += str[i] - 48;
